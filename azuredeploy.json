{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters" : {
        "clusterName": {
            "defaultValue": "mapraz",
            "type": "string",
            "metadata": {
                 "description": "Unique name for deployed MapR cluster"
            }
        },
        "clusterSize": {
            "defaultValue": 3,
            "type": "int"
        },
        "clusterEdition": {
            "defaultValue": "M3",
            "type": "string",
            "allowedValues": ["M3", "M5", "M7"],
            "metadata": {
                 "description": "MapR License Edition {Community, Enterprise, or Enterprise Database}"
            }
        },
        "adminUserName": {
            "defaultValue": "azadmin",
            "type": "string"
        },
        "adminPassword": {
            "defaultValue": "MapRAzur3",
            "type": "securestring"
        },
        "imagePublisher": {
            "type": "string",
            "defaultValue": "OpenLogic",
            "metadata": {
                 "description": "Image Publisher"
            }
        },
        "imageOffer": {
            "type": "string",
            "defaultValue": "CentOS",
            "metadata": {
                "description": "Image Offer"
            }
        },
        "imageSKU": {
            "type": "string",
            "defaultValue": "6.5",
            "metadata": {
                "description": "Image SKU"
            }
        },
        "location": {
            "type": "string",
            "defaultValue" : "West US",
            "allowedValues": ["East US", "West US", "West Europe", "East Asia", "South East Asia"],
            "metadata": {
                "description": "Deployment location"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D12",
            "allowedValues": ["Standard_D2", "Standard_D3", "Standard_D4", "Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14","Standard_DS3","Standard_DS4", "Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14"]
        }
    },
    "variables": {
        "scriptsUri" : "https://raw.githubusercontent.com/mapr/mapr-azure/master",
        "vmBasename": "[concat(parameters('clusterName'),'node')]",
        "nicBasename": "[concat(parameters('clusterName'),'-nic')]",
        "publicIPAddressBasename": "[concat(parameters('clusterName'),'-publicIP')]",
        "storageAccountBasename": "[concat(parameters('clusterName'),'sa')]",
        "networkSpec" : {
            "vnetCIDR":"10.0.0.0/16",
            "subnet1Name": "Privnet-1",
            "subnet1CIDR" : "10.0.0.0/24",
            "subnet1Prefix" : "10.0.0.",
            "subnet2Name": "Privnet-2",
            "subnet2CIDR" : "10.0.1.0/24",
            "subnet2Prefix" : "10.0.1.",
            "nodeAddressStart" : 10
        },
        "vmStorageAccountContainerName": "vhds",
        "publicIPAddressType" : "Dynamic",
        "storageAccountType": "Premium_LRS",
        "vnetID":"[resourceId('Microsoft.Network/virtualNetworks',concat(parameters('clusterName'), '-vnet'))]",
        "subnet1Ref" : "[concat(variables('vnetID'),'/subnets/',variables('networkSpec').subnet1Name)]"
    },
    "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccountBasename'), copyIndex())]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "copy": {
                "name": "storageAccountLoop",
                "count": "[parameters('clusterSize')]"
       },
       "properties": {
           "accountType": "[variables('storageAccountType')]"
       }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIPAddressBasename'), copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
          "name": "publicIPLoop",
          "count": "[parameters('clusterSize')]"
      },
      "properties": {
          "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
          "dnsSettings": {
              "domainNameLabel": "[concat(parameters('clusterName'),'-node',copyIndex())]"
          }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[concat(parameters('clusterName'), '-vnet')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('networkSpec').vnetCIDR]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('networkSpec').subnet1Name]",
            "properties" : {
                "addressPrefix": "[variables('networkSpec').subnet1CIDR]"
            }
          },
          {
            "name": "[variables('networkSpec').subnet2Name]",
            "properties" : {
                "addressPrefix": "[variables('networkSpec').subnet2CIDR]"
            }
          }
        ]
      }
    },
    {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[concat(variables('nicBasename'), copyIndex())]",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressBasename'), copyIndex())]",
            "[concat('Microsoft.Network/virtualNetworks/', parameters('clusterName'), '-vnet')]"
        ],
        "copy": {
            "name": "nicLoop",
            "count": "[parameters('clusterSize')]"
        },
        "properties": {
            "ipConfigurations": [
            {
                "name": "ipconfig1",
                "properties": {
                    "privateIPAllocationMethod": "Static",
                    "privateIPAddress": "[concat(variables('networkSpec').subnet1Prefix, copyIndex(variables('networkSpec').nodeAddressStart))]",
                    "subnet": {
                        "id": "[variables('subnet1Ref')]"
                    },
                    "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressBasename'),copyIndex()))]"
                    }
                }
            }
            ]
        }
    },
    {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(variables('vmBasename'), copyIndex())]",
        "location": "[parameters('location')]",
        "copy" : {
            "name" : "nicLoop",
            "count": "[parameters('clusterSize')]"
            
        },
        "dependsOn": [
            "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountBasename'), copyIndex())]",
            "[concat('Microsoft.Network/networkInterfaces/', variables('nicBasename'), copyIndex())]"
        ],
        "properties": {
            "hardwareProfile": {
                "vmSize": "[parameters('vmSize')]"
            },
            "osProfile": {
                "computername": "[concat(variables('vmBasename'),copyIndex())]",
                "adminUsername": "[parameters('adminUsername')]",
                "adminPassword": "[parameters('adminPassword')]"
            },
            "storageProfile": {
              "imageReference": {
                "publisher": "[parameters('imagePublisher')]",
                "offer": "[parameters('imageOffer')]",
                "sku" : "[parameters('imageSKU')]",
                "version":"latest"
              },
              "osDisk" : {
                "name": "osdisk1",
                "vhd": {
                   "uri": "[concat('http://',variables('storageAccountBasename'),copyIndex(),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/','osdisk1spec.vhd')]"
                },
                "caching": "ReadWrite",
                "createOption": "FromImage"
              },
              "dataDisks": [
                {
                    "name": "datadisk0",
                    "diskSizeGB": "200",
                    "lun": 0,
                    "vhd": {
                        "Uri": "[concat('http://', variables('storageAccountBasename'), copyIndex(), '.blob.core.windows.net/vhds0/', 'datadisk0.vhd')]"
                    },
                    "createOption": "Empty"
                }
              ]
            },
            "networkProfile": {
                "networkInterfaces" : [
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicBasename'), copyIndex()))]"
                }
                ]
            }
        }
    },
    {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmBasename'),copyIndex(),'/preparenode')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[parameters('location')]",
            "copy" : {
                "name" : "nicLoop",
                "count": "[parameters('clusterSize')]"
            
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmBasename'), copyIndex())]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.2",
                "settings": {
                    "fileUris": [
                        "[concat(variables('scriptsUri'), '/gen-cluster-hosts.sh')]",
                        "[concat(variables('scriptsUri'), '/prepare-disks.sh')]",
                        "[concat(variables('scriptsUri'), '/prepare-node.sh')]",
                        "[concat(variables('scriptsUri'), '/deploy-installer.sh')]",
                        "[concat(variables('scriptsUri'), '/deploy-mapr-ami.sh')]",
                        "[concat(variables('scriptsUri'), '/deploy-mapr-cluster.py')]",
                        "[concat(variables('scriptsUri'), '/azure-wrapper.sh')]",
                        "[concat(variables('scriptsUri'), '/installer-wrapper.sh')]"
                    ],
                    "commandToExecute": "[concat('sh azure-wrapper.sh ', variables('vmBasename'), ' ', parameters('clusterSize'))]"
                }
            }
        }
    ]
}
